{"ast":null,"code":"/* import React, { useState, useEffect } from 'react';\nimport axios from \"axios\"\nconst API_URL = \"http://localhost:3000\"\n\nconst AuthContext = React.createContext()\n\nfunction AuthProviderWrapper(props){\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [user, setUser] = useState(null);\n\n    function authenticateUser(){\n        const storedToken = localStorage.getItem(\"authToken\")\n\n        if (storedToken){\n            axios.get(`${API_URL}/auth/verify`, {headers: {Authorization: `Bearer ${storedToken}`}})\n                .then((response) => {\n                    const user = response.data\n                    setIsLoggedIn(true);\n                    setIsLoading(false);\n                    setUser(user); \n                })\n                .catch((error) => {\n                    setIsLoggedIn(false);\n                    setIsLoading(false);\n                    setUser(null); \n                })\n        } else {\n            setIsLoggedIn(false);\n            setIsLoading(false);\n            setUser(null);   \n        }\n    }\n\n    function removeToken(){\n        localStorage.removeItem(\"authToken\")\n    }\n\n    function logOutUser(){\n        removeToken()\n        authenticateUser()\n    }\n\n    useEffect(() => {\n        authenticateUser()\n    },[])\n\n    return (\n        <AuthContext.Provider value={{isLoggedIn, isLoading, user, authenticateUser, logOutUser}}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport {AuthProviderWrapper, AuthContext} */","map":{"version":3,"names":[],"sources":["/Users/maxko/Desktop/IronHack Bootcamp/3-module/my-artsy-app/my-artsy-app-client/src/context/Auth.context.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react';\nimport axios from \"axios\"\nconst API_URL = \"http://localhost:3000\"\n\nconst AuthContext = React.createContext()\n\nfunction AuthProviderWrapper(props){\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [user, setUser] = useState(null);\n\n    function authenticateUser(){\n        const storedToken = localStorage.getItem(\"authToken\")\n\n        if (storedToken){\n            axios.get(`${API_URL}/auth/verify`, {headers: {Authorization: `Bearer ${storedToken}`}})\n                .then((response) => {\n                    const user = response.data\n                    setIsLoggedIn(true);\n                    setIsLoading(false);\n                    setUser(user); \n                })\n                .catch((error) => {\n                    setIsLoggedIn(false);\n                    setIsLoading(false);\n                    setUser(null); \n                })\n        } else {\n            setIsLoggedIn(false);\n            setIsLoading(false);\n            setUser(null);   \n        }\n    }\n\n    function removeToken(){\n        localStorage.removeItem(\"authToken\")\n    }\n\n    function logOutUser(){\n        removeToken()\n        authenticateUser()\n    }\n\n    useEffect(() => {\n        authenticateUser()\n    },[])\n\n    return (\n        <AuthContext.Provider value={{isLoggedIn, isLoading, user, authenticateUser, logOutUser}}>\n            {props.children}\n        </AuthContext.Provider>\n    )\n}\n\nexport {AuthProviderWrapper, AuthContext} */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}